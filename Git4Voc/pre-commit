#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

currentBranch=$(git symbolic-ref HEAD)

if [ "$currentBranch" = "refs/heads/master1" ]; then
	 echo "\t\033[31mYou are not allowed to commit to master branch! ${file}\033[0m"
	 exit 1
else

	files=$(git diff --cached --name-only --diff-filter=ACM | grep ".ttl$")
	if [ "$files" = "" ]; then 
	    exit 0 
	fi

	pass=true	

	echo "\nValidating Turtle:\n"

	for file in ${files}; do

	    res=$(rapper -i turtle "${files}" -c 2>&1)

	    if echo $res | grep -q "Error"; then
		echo "\t\033[31mValidation Failed! ${file}\033[0m"
		echo $res
		pass=false
	    else
	       echo "\t\033[32mValidation Passed! ${file}\033[0m"
	    fi

	done

        if ! $pass; then
	 
          for file in ${files}; do

           fileContent=`cat ${files}`

	   result="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
	   <OOPSRequest>
		<OntologyUrl></OntologyUrl>
		<OntologyContent>${fileContent}</OntologyContent>
		<Pitfalls>10</Pitfalls>
		<OutputFormat></OutputFormat>
	   </OOPSRequest>"

	   res=$(curl -X POST -d "$result" -H "Content-Type: application/xml" http://oops-ws.oeg-upm.net/rest)

	   if echo $res | grep -q "Error"; then
		echo $res
                pass = false

	    fi

	  done

	fi

	
	JAVA_HOME=$(JAVA_HOME)
	
	#The following is based on the implementation: https://github.com/edmcouncil/rdf-toolkit/blob/master/etc/git-hook/pre-commit 

        #Normalization using RDF-Toolkit
        exec 1>&2

	log_prefix="rdf-toolkit: sesame-serializer: "

	function log() {
	  echo "${log_prefix}$@"
	}

	function log_error() {
	  log "ERROR: $@"
	}

	java_exe=""
	base_dir=""

	function findJava() {

	  whichJava=""

	  java_home=""

	  if [ "${RDF_TOOLKIT_JAVA_HOME}" != "" ] ; then
	    java_home="${RDF_TOOLKIT_JAVA_HOME}"
	  fi
	  if [ "${JAVA_HOME}" != "" ] ; then
	    java_home="${JAVA_HOME}"
	  fi
	  if [ "${java_home}" == "" ] ; then
	      log_error A-$JAVA_HOME
	    log_error "Please set RDF_TOOLKIT_JAVA_HOME or JAVA_HOME to point to a Java 7 or later installation."
	    return 1
	  fi
	  java_home=${java_home/C:\\/\/c\/}
	  java_home=${java_home//\\/\/}
	  log "java_home =" ${java_home}

	  if [ -x "${java_home}/bin/java" ] ; then
	    whichJava="${java_home}/bin/java"
	  else
	    log_error "Could not find java in your RDF_TOOLKIT_JAVA_HOME or JAVA_HOME: ${java_home}"
	    log_error "Please set RDF_TOOLKIT_JAVA_HOME or JAVA_HOME to point to a Java 7 or later installation."
	    return 1
	  fi
	  log "whichJava =" $whichJava

	  local versionJava=$( "$whichJava" -version 2>&1 | head -n 1 | cut -d \"  -f 2 )
	  log "versionJava = " $versionJava

	  set -- ${versionJava//./ }

	  local java_major=$1
	  local java_minor=$2

	  if [ $java_major -eq 1 -a $java_minor -gt 7 ] ; then
	  	:
	  else
	    log_error "You are using Java $java_major.$java_minor whereas the Sesame serializer requires Java 1.7 or higher"
	    return 2
	  fi

	  java_exe="${whichJava}"

	  return 0
	}

	function findSerializerJar() {

	  if [ "${RDF_TOOLKIT_JAR}" == "" ] ; then
	    RDF_TOOLKIT_JAR="$PWD/tools/rdf-toolkit.jar"
	  fi

	  if [ -f "${RDF_TOOLKIT_JAR}" ] ; then
	  	log "Found rdf-toolkit: ${RDF_TOOLKIT_JAR}"
	  	return 0
	  fi

	  log_error "Could not find the rdf-toolkit JAR, please reinstall. Set RDF_TOOLKIT_JAR or put rdf-toolkit.jar in the .git/hook directory."

	  return 1
	}


	function showFilesThatAreInCommit() {

	  git diff --cached --name-only
	}

	function serialize() {

	  local file="$1"
	  if [ -f "$file" ] ; then
	    local extension="${file##*.}"
	    if [ -d "$TEMP" ] ; then
	      local logcfg="$TEMP/sesame-serializer-log"
	    else
	      if [ -d "/tmp/" ] ; then
		local logcfg="/tmp/sesame-serializer-log"
	      fi
	    fi


	    case ${extension} in
	    	rdf)
	     	  ;;
	      *)
		log "Skipping unsupported file $file"
		return 0
	    esac

	    if [ -x "$logcfg" ] ; then
	      cat > ${logcfg} << __log_config__
	[logger_root]
	level: error
	handlers: h1

	[handler_h1]
	level: error
	class: ConsoleHandler
	formatter: f1

	[formatter_f1]
	class: DefaultFormatter
	format: (%l) %t
	__log_config__
	    fi

	    log "Launching the sesame-serializer with --source ${file}"

	    set -x
	    "${java_exe}" -Xmx1g "-Dorg.clapper.avsl.config=${logcfg}" -cp "${RDF_TOOLKIT_JAR}" org.edmcouncil.rdf_toolkit.SesameRdfFormatter \
	      --source "${file}" \
	      --target "${file}" \
	      --target-format rdf-xml \
	      --use-dtd-subset -ibn -ibu \
	      -sdt explicit 
	    rc=$?
	    set +x

	    if [ -x "$logcfg" ] ; then
	      rm -f "${logcfg}" >/dev/null 2>&1
	    fi

	    sed '/rdfs:label/!b;:a;/datatype="&xsd;string"/bb;$!{N;ba};:b;s/rdfs:label.*datatype=".....string"/rdfs:label/' "${file}" > temp
	    rm "${file}"
	    mv temp "${file}"

	    if [ ${rc} -eq 0 ] ; then
	      log "Re-adding potentially re-serialized file to git staging area: ${file}"
	      git add --update "${file}"
	    else
	      log_error "sesame-serializer ended with error code ${rc}"
	    fi
	    return ${rc}
	  else
	    return 0
	  fi

	}

	function serialize_all() {

	  #echo "Checking the following files:"
	  #showFilesThatAreInCommit

	  for fileToBeCommitted in $(git diff --cached --name-only) ; do
	    if ! serialize "$fileToBeCommitted" ; then
	      return 1
	    fi
	  done

	  return 0
	}

	echo "\Turtle validation complete\n"

	function main() {

	findJava || return 1
	findSerializerJar || return 2
	  serialize_all
	}

	main $*
	rc=$?

	if ! $pass; then
	    echo "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass Validation but do not. Please fix the errors and try again.\n"
	    echo ${file}
	    exit 1
	else if [ $rc -gt 0 ] ; then
	  log_error "Could not commit your files"
	  exit $rc
	fi
	else
	    echo "\033[42mCOMMIT SUCCEEDED\033[0m\n"
	fi

fi
