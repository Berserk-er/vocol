#!/bin/sh

    for fileName in `find . -name '*.ttl'`; do

      res=$(rapper -i turtle "${fileName}" -c 2>&1)

      if echo $res | grep -q "Error"; then
	echo "\t\033[31mValidation Failed! ${file}\033[0m"
      else
       rapper -i turtle -o ntriples $fileName > $fileName.nt
      fi
    done

    for fileName in `find . -name '*.nt'`; do

      cat ${fileName} >> SingleVoc.nt
      rm -f ${fileName}
    done

    #Generate documentation using Widoco
    java -jar  @path/widoco-0.0.1-jar-with-dependencies.jar -ontFile "SingleVoc.nt" -outFolder artifacts/

    #Generate evolution report
    cd artifacts/templates

    if [ -f PrevSingleVoc.nt ]; then

      evolutionReport=$(owl2diff PrevSingleVoc.nt SingleVoc.nt  -c 2>&1)

      if echo $evolutionReport | grep -q -v "identical"; then

	      fileContent=`cat evolution.html`

	      constant_string="diff SingleVoc.nt SingleVoc.nt"
	      generationDate="$(date +%d-%m-%Y)"
	      openTag="<"
	      closeTag=">"
	      openTagHtml="&lt;"
	      closeTagHtml="&gt;"
	      reportDiv="<div> </div>"
	      add="+"
	      del="-"
	      reportBreakInAddition="</br>+"
	      reportBreakInDeletion="</br>-"
	      evolutionReport="${evolutionReport//$openTag/$openTagHtml}"
	      evolutionReport="${evolutionReport//$closeTag/$closeTagHtml}"
	      evolutionReport="${evolutionReport/$constant_string/}"
	      evolutionReport="${evolutionReport//$del/$reportBreakInDeletion}"
	      evolutionReport="${evolutionReport//$add/$reportBreakInAddition}"

	      uniqueID=$(cat /proc/sys/kernel/random/uuid)

	      result_Content="${fileContent/$reportDiv/$reportDiv</hr></br><div id=\"$uniqueID\">${1}:$g$

	      echo "${result_Content}" > evolution.html

	      node helper.js $uniqueID "\"${1}\""

	      fi
     fi

    mv SingleVoc.nt PrevSingleVoc.nt
    
    #Generate documentation using Parrot
    #java -jar tools/parrot-jar-with-dependencies.jar -i "${file}" -o "${file}".html
    
    #Generate documentation using Specgen
    # @path/specgen6.py --indir=onto/olo/ --ns=http://purl.org/mobivoc#  --prefix=olo --ontofile="${file}" --outdir=spec/olo/ --templatedir=onto/olo/ --    
    # outfile="${file}".html

    #Generate documentation using CustomTool from https://github.com/vocol/vocol/tree/master/HtmlGenerator in combination with Schema.org and Google Appi Engine
    #  java \
    #    -cp  .:jena-arq-2.12.1.jar:jena-core-2.12.1.jar:jena-iri-1.1.1.jar:log4j-1.2.17.jar:slf4j-api-1.7.6.jar:xercesImpl-2.11.0.jar:xml-apis-1.4.01.jar \
    #    HtmlGenerator \
    #    "${DEPLOY_PATH}/"${file}" \
    #    "${SCHEMAORG_PATH}/data/schema.rdfa" \
    #    "${VOCOL_PATH}/HtmlGenerator/Templates/template.html" \
    #    "${SCHEMAORG_PATH}/docs/schemas.html" \
    #    "${VOCOL_PATH}/HtmlGenerator/Templates/schemasTemplate.html"
 
    #Generate documentation using Dowl
    # $(dowl "${file}" > owldoc/"${file}".html)



echo "\Documentation Generation completed.\n"

exit 1

